@page "/PhongTros/edit"
@inject QuanLyPhongTro.Data.QuanLyPhongTroContext DB
@using QuanLyPhongTro
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Sửa phòng</PageTitle>

<h1 class="text-danger-emphasis fw-bold text-center">Sửa thông tin phòng trọ</h1>
<hr />
@if (PhongTro is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12">
            <EditForm method="post" Model="PhongTro" OnValidSubmit="UpdatePhongTro" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="PhongTro.MaPhongTro" value="@PhongTro.MaPhongTro" />
                <div class="mb-3">
                    <label for="machutro" class="form-label text-primary fw-medium">Mã chủ trọ:</label>
                    <InputNumber id="machutro" @bind-Value="PhongTro.MaChuTro" class="form-control" />
                    <ValidationMessage For="() => PhongTro.MaChuTro" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="tenchutro" class="form-label text-primary fw-medium">Tên chủ trọ:</label>
                    <InputText id="tenchutro" @bind-Value="PhongTro.TenChuTro" class="form-control" />
                    <ValidationMessage For="() => PhongTro.TenChuTro" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="diachitro" class="form-label text-primary fw-medium">Địa chỉ chủ trọ:</label>
                    <InputText id="diachitro" @bind-Value="PhongTro.DiaChiTro" class="form-control" />
                    <ValidationMessage For="() => PhongTro.DiaChiTro" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="trangthai" class="form-label text-primary fw-medium">Trạng thái:</label>
                    <InputCheckbox id="trangthai" @bind-Value="PhongTro.TrangThai" class="form-check-input" />
                    <ValidationMessage For="() => PhongTro.TrangThai" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dientich" class="form-label text-primary fw-medium">Diện tích:</label>
                    <InputNumber id="dientich" @bind-Value="PhongTro.DienTich" class="form-control" />
                    <ValidationMessage For="() => PhongTro.DienTich" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="gia" class="form-label text-primary fw-medium">Giá phòng:</label>
                    <InputNumber id="gia" @bind-Value="PhongTro.Gia" class="form-control" />
                    <ValidationMessage For="() => PhongTro.Gia" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="ngaydang" class="form-label text-primary fw-medium">Ngày đăng:</label>
                    <InputDate id="ngaydang" @bind-Value="PhongTro.NgayDang" class="form-control" />
                    <ValidationMessage For="() => PhongTro.NgayDang" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="chitiet" class="form-label text-primary fw-medium">Chi tiết:</label>
                    <InputText id="chitiet" @bind-Value="PhongTro.ChiTiet" class="form-control" />
                    <ValidationMessage For="() => PhongTro.ChiTiet" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="btn btn-primary px-4 my-3 me-3">Lưu</button>
                    <a href="/phongtros" class="text-decoration-none">Quay lại</a>
                </div>
                
            </EditForm>
        </div>
    </div>
}



@code {
    [SupplyParameterFromQuery]
    public int MaPhongTro { get; set; }

    [SupplyParameterFromForm]
    public PhongTro? PhongTro { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PhongTro ??= await DB.PhongTro.FirstOrDefaultAsync(m => m.MaPhongTro == MaPhongTro);

        if (PhongTro is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdatePhongTro()
    {
        DB.Attach(PhongTro!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PhongTroExists(PhongTro!.MaPhongTro))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/phongtros");
    }

    bool PhongTroExists(int maphongtro)
    {
        return DB.PhongTro.Any(e => e.MaPhongTro == maphongtro);
    }
}
